import{_ as s,c as a,o as n,a as e}from"./app.c41aeefa.js";const l="/assets/joelang-switch.cf67d961.svg",t="/assets/js-switch.8b797884.svg",o="/assets/joelang-conditional-arrays.73dea70d.svg",p="/assets/js-conditional-arrays.d5bf92e5.svg",r="/assets/joelang-access.c526a1c7.svg",i="/assets/js-access.4c416d36.svg",f=JSON.parse('{"title":"joelang","description":"","frontmatter":{},"headers":[{"level":2,"title":"Quick Start","slug":"quick-start","link":"#quick-start","children":[]},{"level":2,"title":"Challenge","slug":"challenge","link":"#challenge","children":[]},{"level":2,"title":"Solution","slug":"solution","link":"#solution","children":[]},{"level":2,"title":"Design","slug":"design","link":"#design","children":[]},{"level":2,"title":"Comparison","slug":"comparison","link":"#comparison","children":[]}],"relativePath":"index.md"}'),c={name:"index.md"},d=e(`<h1 id="joelang" tabindex="-1">joelang <a class="header-anchor" href="#joelang" aria-hidden="true">#</a></h1><p>A scripting language focused on easy reading</p><h2 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-hidden="true">#</a></h2><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#676E95;"># run the lexer</span></span>
<span class="line"><span style="color:#A6ACCD;">npm run --silent lexify -- </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">your expression</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># lexify an expression</span></span>
<span class="line"><span style="color:#A6ACCD;">npm run --silent lexify -- </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#C3E88D;">cat path/to/file.joe</span><span style="color:#89DDFF;">)&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># lexify a .joe file</span></span>
<span class="line"><span style="color:#A6ACCD;">npm run --silent lexify -- </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> file.tokens </span><span style="color:#676E95;"># send the tokens output to a file</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># run the parser</span></span>
<span class="line"><span style="color:#A6ACCD;">npm run --silent parse -- </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">your expression</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># parse an expression</span></span>
<span class="line"><span style="color:#A6ACCD;">npm run --silent parse -- </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#C3E88D;">cat path/to/file.joe</span><span style="color:#89DDFF;">)&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># parse a .joe file</span></span>
<span class="line"><span style="color:#A6ACCD;">npm run --silent parse -- </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> file.parse-tree </span><span style="color:#676E95;"># send the Parse Tree output to a file</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># run the tests</span></span>
<span class="line"><span style="color:#A6ACCD;">npm </span><span style="color:#82AAFF;">test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># run lexer example1</span></span>
<span class="line"><span style="color:#A6ACCD;">npm run --silent lexify -- </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#C3E88D;">cat examples/example1/main.joe</span><span style="color:#89DDFF;">)&quot;</span><span style="color:#A6ACCD;"> examples/example1/main.tokens</span></span>
<span class="line"><span style="color:#676E95;"># run parser example1</span></span>
<span class="line"><span style="color:#A6ACCD;">npm run --silent parse -- </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#C3E88D;">cat examples/example1/main.joe</span><span style="color:#89DDFF;">)&quot;</span><span style="color:#A6ACCD;"> examples/example1/main.parse-tree</span></span>
<span class="line"><span style="color:#676E95;"># transpile to Golang</span></span>
<span class="line"><span style="color:#A6ACCD;">npm run --silent transpile -- go </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#C3E88D;">cat examples/example1/main.joe</span><span style="color:#89DDFF;">)&quot;</span><span style="color:#A6ACCD;"> examples/example1/main.go</span></span>
<span class="line"><span style="color:#676E95;"># transpile to Typescript</span></span>
<span class="line"><span style="color:#A6ACCD;">npm run --silent transpile -- ts </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#C3E88D;">cat examples/example1/main.joe</span><span style="color:#89DDFF;">)&quot;</span><span style="color:#A6ACCD;"> examples/example1/main.ts</span></span>
<span class="line"></span></code></pre></div><h2 id="challenge" tabindex="-1">Challenge <a class="header-anchor" href="#challenge" aria-hidden="true">#</a></h2><p>Many languages are verbose and difficult to read. The goal of joelang is for the developer to read code smoothly, and not have to do mental gymnastics to understand the flow of logic.</p><p>Let&#39;s establish a few ground truths, which I think we can agree on:</p><ul><li>Code is read far more often than it is written</li><li>Code maintenace is longer than the time it took to write the original version</li><li>Computing power is now cheaper than human time</li></ul><h2 id="solution" tabindex="-1">Solution <a class="header-anchor" href="#solution" aria-hidden="true">#</a></h2><p><a href="https://en.wikipedia.org/wiki/KISS_principle" target="_blank" rel="noreferrer">KISS</a>. Keep the syntax concise, simlar to ruby, but without the magic.</p><p>In reality, simplicity is hard. But we do the hard work so you can do the easy work.</p><h2 id="design" tabindex="-1">Design <a class="header-anchor" href="#design" aria-hidden="true">#</a></h2><p>See the <a href="./design.html">design</a></p><h2 id="comparison" tabindex="-1">Comparison <a class="header-anchor" href="#comparison" aria-hidden="true">#</a></h2><table><tr><th>Use Case</th><th>joelang</th><th>Other Langs</th></tr><tr><th colspan="3">Conditions</th></tr><tr><td>Conditions to set a variable</td><td><p><img src="`+l+'" alt="image"></p></td><td><p><img src="'+t+'" alt="image"></p></td></tr><tr><td>Conditionally add an item to array</td><td><p><img src="'+o+'" alt="image"></p></td><td><p><img src="'+p+'" alt="image"></p></td></tr><tr><th colspan="3">Tuple / Array / Object / String access and splicing</th></tr><tr><td>Get some items from array</td><td><p><img src="'+r+'" alt="image"></p><ul><li>also works on tuples ...</li><li>and on strings ...</li><li>and objects too ... (the selective syntax)</li></ul></td><td><p><img src="'+i+'" alt="image"></p></td></tr></table><p>More to come...</p>',16),h=[d];function y(m,u,D,g,C,A){return n(),a("div",null,h)}const F=s(c,[["render",y]]);export{f as __pageData,F as default};
